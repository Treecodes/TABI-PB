#include <iostream>
#include <iomanip>
#include <cstdlib>

#include "params.h"
#include "molecule.h"
#include "particles.h"
#include "tree.h"
#include "interaction_list.h"
#include "clusters.h"
#include "boundary_element.h"
#include "tabipb_timers.h"
#include "output.h"


int main(int argc, char* argv[])
{
    // set the parameter struct, which is read in from file provided as argv
    if (argc < 2) { 
        std::cout << "No input file set. Exiting." << std::endl; 
        std::exit(1);
    }
    struct Params params(argv[1]);
    struct Timers timers;
    
    timers.tabipb.start();
    
    //construct the biomolecule from the provided pqr file
    class Molecule molecule(params, timers.molecule);
    
    molecule.copyin_to_device();
    molecule.compute_coulombic_energy();
    molecule.build_xyzr_file();
    
    // build particles from a NanoShaper surface generated by xyzr file
    // then build a tree on the particles, partitioning them
    class Particles particles(molecule, params, timers.particles);
    class Tree tree(particles, params, timers.tree);
    
    particles.copyin_to_device();
    particles.compute_source_term();
    
    // build clusters and set interpolation points for the tree constructed above
    class Clusters clusters(particles, tree, params, timers.clusters);
    
    clusters.copyin_to_device();
    clusters.compute_all_interp_pts();
    
    // build interaction lists from the tree constructed above
    class InteractionList interaction_list(tree, params, timers.interaction_list);
    
    // initialize the boundary element method and construct the potential output array
    class BoundaryElement boundary_element(particles, clusters,
                                   tree, interaction_list, molecule,
                                   params, timers.boundary_element);
    
    boundary_element.run_GMRES();
    boundary_element.finalize();

    molecule.delete_from_device();
    particles.delete_from_device();
    clusters.delete_from_device();
    
    timers.tabipb.stop();

    auto energies = Output(boundary_element, timers);
    
    return 0;
}
